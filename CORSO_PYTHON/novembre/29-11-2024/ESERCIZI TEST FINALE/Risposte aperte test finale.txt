3.Quale il meccanismo delle classi e degli oggetti del OOP? come funziona? che pezzi DEVE avere la classe?

In Python, le classi sono fondamentali per la programmazione orientata agli oggetti (OOP).
Le classi consentono di definire strutture che raggruppano dati (attributi) e comportamenti (metodi) correlati in un unico oggetto di un determinato tipo.

Le classi sono un'astrazione dei concetti del mondo reale e una classe è un modello per la creazione di oggetti.
Un oggetto è un'istanza di una classe, cioè una copia univoca della classe che ha le sue proprietà uniche.
Le classi sono definite usando la parola chiave class, seguita dal nome della classe.
Le classi possono contenere metodi e attributi.

Gli attributi sono variabili associate a una classe, rappresentano le proprietà di un oggetto e sono condivisi tra tutte le istanze della classe.
I metodi sono funzioni associate a una classe e rappresentano il comportamento di un oggetto.

Le classi, contengono anche un metodo costruttore, così chiamato perché definisce le caratteristiche principali dell'oggetto.

Per esempio:

class Nomeclasse():
def __init__(self, ValoreAttributo):
self.Attributo = ValoreAttributo

6.Cos'è e quali sono le le fasi del ML (6)

Il Machine Learning è un ramo
dell'intelligenza artificiale che
permette ai computer di imparare dai
dati e migliorare autonomamente
attraverso l'esperienza.
Il suo obbiettivo è Automatizzare
processi decisionali basandosi su
pattern e inferenze piuttosto che su
istruzioni esplicite.
Fasi:
1.
Caricamento e Preparazione dei Dati:
Utilizza dataset forniti o carica i tuoi dati.
Preprocessa i dati per pulirli e
normalizzarli, rendendoli adatti all'analisi.
2.
Divisione del Dataset:
Suddivide i dati in set di training e test per
costruire e valutare il modello.
3.
Selezione del Modello:
Scegli un algoritmo appropriato in base al
problema (es. regressione, classificazione,
clustering).
4. 
Addestramento del Modello:
Utilizza il metodo .fit() per addestrare il
modello sui dati di training.
5.
Predizione:
Applica il modello addestrato ai dati di test o
nuovi dati usando .predict().
6. 
Valutazione del Modello:
Valuta le prestazioni del modello con metriche
appropriate (es. accuratezza, errore quadratico
medio).

9.Cos'è una JOIN? di che tipo ne esistono?
È una clausola che viene utilizzata per combinare righe da due o più tabelle, in
 base a una colonna correlata tra di loro.
Ci sono 4 tipi di join:
1. (INNER) JOIN: restituisce record con valori in comune
2. LEFT (OUTER) JOIN: restituisce tutti i record della tabella di sinistra e i
record con valori in comune
3.RIGHT (OUTER) JOIN: restituisce tutti i record della tabella di destra e i
 record con valori in comune
4. FULL (OUTER) JOIN: restituisce tutti i record quando è presente una
 corrispondenza in uno dei due a sinistra o a destra

Machine Learning (Apprendimento Automatico) e Deep Learning (Apprendimento
Profondo) sono entrambi sottocampi dell'intelligenza artificiale, ma presentano
differenze:
13. Quali sono le principali differenze tra ML e DL?
Machine Learning

Definizione: Disciplina che permette ai computer di apprendere dai dati senza
essere esplicitamente programmati per ogni compito.
Tecniche: Include algoritmi come regressione lineare, alberi decisionali,
SVM, k-NN, clustering, ecc.
Feature Engineering: Richiede spesso l'estrazione manuale di caratteristiche
dai dati per alimentare gli algoritmi di apprendimento.

Deep Learning

Definizione: Sottocampo del machine learning che utilizza reti neurali
artificiali profonde per modellare e comprendere dati complessi.
Reti Neurali Profonde: Composte da molti strati (layers) che permettono di
apprendere rappresentazioni gerarchiche dei dati.
Feature Learning Automatizzato: Le reti neurali possono estrarre
automaticamente le caratteristiche rilevanti dai dati grezzi.

16. 16.Cosa fanno è quali sono le fasi che vengono specializzate nel DL (3)

Nel deep learning (DL), ci sono diverse fasi specializzate che sono cruciali per costruire e addestrare modelli di reti neurali. Ecco tre fasi principali:

1. **Preprocessing dei Dati**:
   - **Pulizia dei Dati**: Rimuovere o correggere dati mancanti o errati.
   - **Normalizzazione**: Scalare i dati per garantire che tutte le caratteristiche abbiano lo stesso peso.
   - **Suddivisione dei Dati**: Dividere i dati in set di addestramento, validazione e test.

2. **Costruzione e Addestramento del Modello**:
   - **Definizione dell'Architettura**: Scegliere il tipo di rete neurale (ad esempio, CNN, RNN) e definire il numero di strati e neuroni.
   - **Compilazione del Modello**: Specificare la funzione di perdita e l'ottimizzatore.
   - **Addestramento**: Utilizzare i dati di addestramento per ottimizzare i pesi del modello attraverso l'algoritmo di backpropagation.

3. **Valutazione e Ottimizzazione**:
   - **Valutazione delle Prestazioni**: Utilizzare i dati di test per valutare l'accuratezza, la precisione, il richiamo e altre metriche.
   - **Ottimizzazione**: Regolare iperparametri come il tasso di apprendimento, il numero di epoche e la dimensione del batch per migliorare le prestazioni.
   - **Visualizzazione dei Risultati**: Creare grafici come la matrice di confusione per analizzare le prestazioni del modello.

